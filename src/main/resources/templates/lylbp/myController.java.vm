package ${package.Controller};

    #if(${restControllerStyle})
    import org.springframework.web.bind.annotation.*;
    #else
    import org.springframework.stereotype.Controller;
    #end
    #if(${superControllerClassPackage})
    import ${superControllerClassPackage};
    #end

import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import java.util.List;

import ${cfg.BaseCoreUtilPack};
import ${cfg.BaseCoreEntityPack};
import ${cfg.MybatisUtilPack};
import ${cfg.VOPackage}.${entity}VO;
import ${cfg.DTOPackage}.${entity}QueryDTO;
import ${cfg.DTOPackage}.${entity}CreateDTO;
import ${cfg.DTOPackage}.${entity}UpdateDTO;
import ${cfg.ConvertMapperPackage}.${entity}ConvertMapper;
import ${package.Service}.${table.serviceName};
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

import org.springframework.validation.annotation.Validated;

import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import javax.annotation.Resource;

## ----------  BEGIN 字段循环遍历  ----------
#foreach($field in ${table.fields})
    #if(${field.keyFlag})
        #set($keyPropertyName=${field.propertyName})
        #set($keyCapitalName=${field.capitalName})
        #set($keyColumnName=${field.columnName})
    #end
#end
## ----------  END 字段循环遍历  ----------

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
@Api(tags = "$!{table.comment}")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
    #if(${superControllerClass})
    public class ${table.controllerName} extends ${superControllerClass} {
    #else
    public class ${table.controllerName} {
    #end

    #foreach($field in ${table.fields})
        #if(${field.keyFlag})
            #set($keyPropertyName=${field.propertyName})
        #end
    #end

@Resource
private ${table.serviceName}  ${table.entityPath}Service;

@Resource
private ${entity}ConvertMapper ${table.entityPath}ConvertMapper;

/**
 * 获取数据分页列表
 *
 * @author ${author}
 * @date   ${date}
 * @return ResResult<PageResResult <${entity}VO>>
 */
@GetMapping(value = "/getPageList")
@ApiOperation("获取分页列表")
public ResResult<PageResResult<${entity}VO>>getPageList(${entity}QueryDTO queryDTO, PageQueryDTO pageQueryDTO){
        Page<${entity}VO> page = MybatisUtil.getMybatisPlusPage(pageQueryDTO, ${entity}VO.class);
        page.setRecords(${table.entityPath}Service.getVOListBy(page,queryDTO));
        return ResResultUtil.makePageRsp(page.getRecords(), page.getTotal(), page.getCurrent(), page.getSize());
        }

/**
 * 根据主键获取信息
 *
 * @author ${author}
 * @date ${date}
 * @return ResResult<${entity}VO>
 */
@GetMapping(value = "/{${keyPropertyName}}")
@ApiOperation("根据主键获取信息")
public ResResult<${entity}VO> getInfoById(@PathVariable(value = "${keyPropertyName}") @NotBlank String ${keyPropertyName}){
        return ResResultUtil.success(${table.entityPath}Service.getVOInfoBy(${entity}QueryDTO::get${keyCapitalName} , ${keyPropertyName}));
        }


/**
 * 添加
 *
 * @author ${author}
 * @date   ${date}
 * @return ResResult<${entity}VO>
 */
@PostMapping(value = "/add")
@ApiOperation("添加")
public ResResult<Boolean> add(@RequestBody @Validated ${entity}CreateDTO dto){
        return ResResultUtil.success(${table.entityPath}Service.edit(${table.entityPath}ConvertMapper.${table.entityPath}CreateDTO2${entity}(dto)));
        }

/**
 * 编辑
 *
 * @author ${author}
 * @date   ${date}
 * @return ResResult<Boolean>
 */
@PutMapping(value = "/edit")
@ApiOperation("编辑")
public ResResult<Boolean> edit(@RequestBody @Validated ${entity}UpdateDTO dto){
        return ResResultUtil.success(${table.entityPath}Service.edit(${table.entityPath}ConvertMapper.${table.entityPath}UpdateDTO2${entity}(dto)));
        }

/**
 * 通过主键批量删除
 *
 * @author ${author}
 * @date   ${date}
 * @return ResResult<Boolean>
 */
@DeleteMapping(value = "/batchDelete")
@ApiOperation("通过主键批量删除")
public ResResult<Boolean> batchDelete(@RequestBody @NotNull List<Long> idList){
        return ResResultUtil.success(${table.entityPath}Service.removeByIds(idList));
        }
        }

#end