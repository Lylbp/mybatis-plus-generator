package ${package.ServiceImpl};

import ${package.Entity}.${entity};
import ${cfg.VOPackage}.${entity}VO;
import ${cfg.DTOPackage}.${entity}QueryDTO;
import ${package.Mapper}.${table.mapperName};
import ${package.Service}.${table.serviceName};
import ${superServiceImplClassPackage};
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.Map;
import cn.hutool.core.util.ObjectUtil;
import cn.hutool.core.util.StrUtil;
import cn.hutool.core.bean.BeanUtil;
import cn.hutool.core.lang.func.Func1;
import cn.hutool.core.lang.func.LambdaUtil;
import cn.hutool.core.util.ReflectUtil;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.core.toolkit.support.SFunction;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
/**
 * <p>
 * $!{table.comment} 服务实现类
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Service
#if(${kotlin})
open class ${table.serviceImplName} : ${superServiceImplClass}<${table.mapperName}, ${entity}>(), ${table.serviceName} {

}
#else
public class ${table.serviceImplName} extends ${superServiceImplClass}<${table.mapperName}, ${entity}> implements ${table.serviceName} {
        @Override
        public Boolean edit(${entity} entity) {
            //TODO 新增或编辑之前需要进行的逻辑
            return saveOrUpdate(entity);
        }

        @Override
        public List<${entity}VO> getVOListBy(Page<${entity}VO> page, ${entity}QueryDTO queryDTO) {
            return getBaseMapper().queryVOByParams(page, BeanUtil.beanToMap(queryDTO));
        }

        @Override
        public ${entity}VO getVOInfoBy(${entity}QueryDTO queryDTO) {
            ${entity}VO ${table.entityPath}VO = null;
            List<${entity}VO> list = getVOListBy(new Page<>(1, 1), queryDTO);
            if (ObjectUtil.isNotEmpty(list)){
                ${table.entityPath}VO = list.get(0);
            }

            return ${table.entityPath}VO;
        }

        @Override
        public ${entity}VO getVOInfoBy(Func1<${entity}QueryDTO,?>func,Object value){
            ${entity}QueryDTO queryDTO = new ${entity}QueryDTO();
            ReflectUtil.setFieldValue(queryDTO,LambdaUtil.getFieldName(func),value);

            return getVOInfoBy(queryDTO);
        }

        @Override
        public Boolean isExist(String id) {
            return ObjectUtil.isNotEmpty(this.getById(id));
        }

        @Override
        public Boolean columnHasRepeat(String notId, SFunction<${entity}, ?> columnName, Object columnValue) {
            LambdaQueryWrapper<${entity}> wrapper = new QueryWrapper<${entity}>().lambda().eq(columnName, columnValue);
            #foreach($field in ${table.fields})
                #if(${field.columnName} == ${cfg.FieldlogicDeleteName})
                        wrapper.eq(${entity}::get${field.capitalName}, ${cfg.FieldlogicDeleteDefaultValue});
                #end
            #end

            if (StrUtil.isNotEmpty(notId)) {
                #foreach($field in ${table.fields})
                    #if(${field.keyFlag})
                            wrapper.ne(${entity}::get${field.capitalName}, notId);
                    #end
                #end
            }
            List<${entity}> entities = getBaseMapper().selectList(wrapper);

            return ObjectUtil.isNotEmpty(entities);
        }
}
#end
